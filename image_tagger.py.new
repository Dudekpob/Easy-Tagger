import sys
import os
import threading
import PySimpleGUI as sg
import torch
from PIL import Image
from transformers import AutoProcessor, AutoModelForVision2Seq
from huggingface_hub import snapshot_download
import shutil

MODEL_CONFIGS = {
    "WD-14": {
        "name": "SmilingWolf/wd-v1-4-vit-tagger",
        "type": "tagger"
    },
    "Florence 2": {
        "name": "florence-2",
        "type": "caption"
    },
    "JoyCaption": {
        "name": "joycaption",
        "type": "caption"
    }
}

def download_model(model_name, window):
    try:
        window.write_event_value('-STATUS-', f"Downloading model {model_name}...")
        snapshot_download(repo_id=model_name, local_dir=f"models/{model_name}")
        window.write_event_value('-STATUS-', "Model downloaded successfully!")
    except Exception as e:
        window.write_event_value('-STATUS-', f"Error downloading model: {str(e)}")

def process_images(values, window):
    try:
        model_choice = values['-MODEL-']
        input_paths = values['-FILES-'] if values['-FILES-'] else [values['-FOLDER-']]
        output_path = values['-OUTPUT-'] or f"{os.path.dirname(input_paths[0])}_tagged"
        
        # Create output directory
        os.makedirs(output_path, exist_ok=True)
        
        # Check and download model if needed
        model_config = MODEL_CONFIGS[model_choice]
        model_path = f"models/{model_config['name']}"
        if not os.path.exists(model_path):
            window['-STATUS-'].update("Downloading model...")
            download_model(model_config['name'], window)
        
        # Load model
        window['-STATUS-'].update("Loading model...")
        device = "cuda" if torch.cuda.is_available() else "cpu"
        processor = AutoProcessor.from_pretrained(model_path)
        model = AutoModelForVision2Seq.from_pretrained(model_path).to(device)
        
        # Collect all image files
        image_files = []
        for input_path in input_paths:
            if os.path.isfile(input_path):
                if input_path.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                    image_files.append(input_path)
            else:
                for root, _, files in os.walk(input_path):
                    for file in files:
                        if file.lower().endswith(('.png', '.jpg', '.jpeg', '.webp')):
                            image_files.append(os.path.join(root, file))
        
        total_files = len(image_files)
        window['-STATUS-'].update(f"Found {total_files} images to process")
        
        # Process images
        for i, image_path in enumerate(image_files):
            try:
                image = Image.open(image_path)
                
                # Process image
                inputs = processor(images=image, return_tensors="pt")
                inputs = {k: v.to(device) for k, v in inputs.items()}
                
                with torch.no_grad():
                    outputs = model.generate(**inputs)
                tags = processor.batch_decode(outputs, skip_special_tokens=True)[0]
                
                # Save tagged image
                base_name = os.path.splitext(os.path.basename(image_path))[0]
                ext = os.path.splitext(image_path)[1]
                new_filename = f"{base_name}_{tags}{ext}"
                shutil.copy2(image_path, os.path.join(output_path, new_filename))
                
                # Update progress
                progress = (i + 1) / total_files * 100
                window['-PROGRESS-'].update(progress)
                window['-STATUS-'].update(f"Processed {i + 1}/{total_files}: {os.path.basename(image_path)}")
                
            except Exception as e:
                window['-STATUS-'].update(f"Error processing {os.path.basename(image_path)}: {str(e)}")
                continue
        
        window['-STATUS-'].update("Tagging completed!")
        
    except Exception as e:
        window['-STATUS-'].update(f"Error: {str(e)}")
    finally:
        window['-START-'].update(disabled=False)

def main():
    sg.theme('LightGrey1')
    
    layout = [
        [sg.Text("Select Model:"), 
         sg.Combo(list(MODEL_CONFIGS.keys()), key='-MODEL-', default_value="WD-14")],
        
        [sg.Radio('Select Files', "INPUT_TYPE", key='-FILE_MODE-', default=True),
         sg.Radio('Select Folder', "INPUT_TYPE", key='-FOLDER_MODE-')],
        
        [sg.Text("Input:"),
         sg.Input(key='-FILES-', visible=False, enable_events=True),
         sg.FilesBrowse(key='-FILES_BROWSE-', file_types=(("Images", "*.png *.jpg *.jpeg *.webp"),)),
         sg.Input(key='-FOLDER-', visible=False, enable_events=True),
         sg.FolderBrowse(key='-FOLDER_BROWSE-', visible=False)],
        
        [sg.Text("Output Folder (optional):"),
         sg.Input(key='-OUTPUT-'),
         sg.FolderBrowse()],
        
        [sg.ProgressBar(100, orientation='h', size=(50, 20), key='-PROGRESS-')],
        [sg.Text("", size=(60, 2), key='-STATUS-')],
        [sg.Button("Start Tagging", key='-START-')]
    ]
    
    window = sg.Window("Image Tagger", layout, size=(600, 300))
    
    while True:
        event, values = window.read()
        
        if event == sg.WIN_CLOSED:
            break
            
        if event == '-FILE_MODE-':
            window['-FILES-'].update(visible=True)
            window['-FILES_BROWSE-'].update(visible=True)
            window['-FOLDER-'].update(visible=False)
            window['-FOLDER_BROWSE-'].update(visible=False)
            
        if event == '-FOLDER_MODE-':
            window['-FILES-'].update(visible=False)
            window['-FILES_BROWSE-'].update(visible=False)
            window['-FOLDER-'].update(visible=True)
            window['-FOLDER_BROWSE-'].update(visible=True)
            
        if event == '-START-':
            if not values['-MODEL-']:
                sg.popup_error("Please select a model!")
                continue
                
            if not (values['-FILES-'] or values['-FOLDER-']):
                sg.popup_error("Please select input files or folder!")
                continue
                
            window['-START-'].update(disabled=True)
            window['-PROGRESS-'].update(0)
            
            threading.Thread(
                target=process_images,
                args=(values, window),
                daemon=True
            ).start()
            
    window.close()

if __name__ == '__main__':
    main()
